# Set fitted values
M1ExecSet <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=1")
M1NoneExecSet <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=1")
# Simulate
M1Sim <- sim(M1, x = M1ExecSet, x1 = M1NoneExecSet)
# Plot
plot(M1Sim)
# Load packages
library(foreign)
library(Zelig)
# Load data
mydata <- read.dta("/Users/christophergandrud/Dropbox/Jeff/swf/Christopher/ChinaRequest/R_update_9.dta")
# Keep only complete cases
vars <- c("begin", "end", "polit12_nodeath", "lCAO", "ltrade", "cumulative_crisis", "lbc", "led", "lpc3", "lpd", "lmaj", "lpol", "lgrow", "periphery_LAm", "count_polit12",  "imfcode")
data.complete <- mydata[complete.cases(mydata[vars]),]
data.complete <- data.complete[vars]
# Make interaction
data.complete$LcbLedInteract <- data.complete$lbc * data.complete$led
# Estimate model
M1 <- zelig(Surv(begin, end, polit12_nodeath) ~ lCAO + ltrade + cumulative_crisis + lbc + led + LcbLedInteract + lpc3 + lpd + lmaj + lpol + lgrow + periphery_LAm +  strata(count_polit12) +  cluster(imfcode), robust = TRUE, na.action=na.exclude, model = "coxph", data = data.complete, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
# Set fitted values
M1ExecSet <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=2")
M1NoneExecSet <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=2")
# Simulate
M1Sim <- sim(M1, x = M1ExecSet, x1 = M1NoneExecSet)
# Plot
plot(M1Sim)
summary(M1Sim)
test <- summary(M1Sim)
fix(test)
fix(test)
fix(`M1Sim`)
M1Sim.ev <- M1Sim$ev
M1Sim.ev <- data.frame(M1Sim.ev$hr)
View(`M1Sim.ev`)
M1Sim.ev <- M1Sim$ev
fix(`M1Sim.ev`)
M1Sim.ev <- M1Sim$hr
fix(`M1Sim.ev`)
M1Sim.ev <- data.frame(M1Sim.ev$hr)
M1Sim.hr <- data.frame(M1Sim.hr$hr)
M1Sim.hr <- M1Sim$hr
M1Sim.hr <- data.frame(M1Sim.hr$hr)
View(`M1Sim.hr`)
# Load packages
library(foreign)
library(Zelig)
# Load data
mydata <- read.dta("/Users/christophergandrud/Dropbox/Jeff/swf/Christopher/ChinaRequest/R_update_9.dta")
# Keep only complete cases
vars <- c("begin", "end", "polit12_nodeath", "lCAO", "ltrade", "cumulative_crisis", "lbc", "led", "lpc3", "lpd", "lmaj", "lpol", "lgrow", "periphery_LAm", "count_polit12",  "imfcode")
data.complete <- mydata[complete.cases(mydata[vars]),]
data.complete <- data.complete[vars]
# Make interaction
data.complete$LcbLedInteract <- data.complete$lbc * data.complete$led
# Estimate model
M1 <- zelig(Surv(begin, end, polit12_nodeath) ~ lCAO + ltrade + cumulative_crisis + lbc + led + LcbLedInteract + lpc3 + lpd + lmaj + lpol + lgrow + periphery_LAm +  strata(count_polit12) +  cluster(imfcode), robust = TRUE, na.action=na.exclude, model = "coxph", data = data.complete, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
# Set fitted values
M1ExecSet <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=2")
M1NoneExecSet <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=2")
# Simulate
M1Sim <- sim(M1, x = M1ExecSet, x1 = M1NoneExecSet)
M1Sim.hr <- M1Sim$hr
fix(`M1Sim.hr`)
M1Sim.hr <- data.frame(M1Sim.hr$hr)
M1Sim.hr <- M1Sim$hr
fix(`M1Sim.hr`)
M1Sim.hr <- M1Sim$hr
M1Sim.hr <- data.frame(M1Sim.hr$hr)
View(`M1Sim.hr`)
M1Sim.hr <- M1Sim$qi
M1Sim.hr <- data.frame(M1Sim.hr$hr)
View(`M1Sim.hr`)
names(M1Sim.hr) <- "2"
View(`M1Sim.hr`)
M1Sim.hr <- M1Sim$qi
M1Sim.hr <- data.frame(M1Sim.hr$hr)
names(M1Sim.hr) <- "Strata2"
# Plot HR densities
Strata2Plot <- ggplot(data = M1Sim.hr, aes(Strata2)) +
stat_density(aes(ymax = ..density..,  ymin = -..density..),
fill = "grey50", colour = "grey50",
geom = "ribbon", position = "identity") +
theme_bw()
library(ggplot2)
Strata2Plot <- ggplot(data = M1Sim.hr, aes(Strata2)) +
stat_density(aes(ymax = ..density..,  ymin = -..density..),
fill = "grey50", colour = "grey50",
geom = "ribbon", position = "identity") +
theme_bw()
print(Strata2Plot)
Strata2Plot <- ggplot(data = M1Sim.hr, aes(Strata2)) +
stat_density(aes(ymax = ..density..,  ymin = -..density..),
fill = "grey50", colour = "grey50",
geom = "ribbon", position = "identity") +
coord_flip() +
theme_bw()
print(Strata2Plot)
Strata2Plot <- ggplot(data = M1Sim.hr, aes(Strata2)) +
stat_density(aes(ymax = ..density..,  ymin = -..density..),
fill = "grey50", colour = "grey50",
geom = "ribbon", position = "identity") +
ylab("Hazard Ratio") +
coord_flip() +
theme_bw()
print(Strata2Plot)
Strata2Plot <- ggplot(data = M1Sim.hr, aes(Strata2)) +
stat_density(aes(ymax = ..density..,  ymin = -..density..),
fill = "grey50", colour = "grey50",
geom = "ribbon", position = "identity") +
xlab("Hazard Ratio") +
coord_flip() +
theme_bw()
print(Strata2Plot)
Strata2Plot <- ggplot(data = M1Sim.hr, aes(Strata2)) +
stat_density(aes(ymax = ..density..,  ymin = -..density..),
fill = "grey50", colour = "grey50",
geom = "ribbon", position = "identity") +
xlab("Hazard Ratio"\n) +
coord_flip() +
theme_bw()
print(Strata2Plot)
Strata2Plot <- ggplot(data = M1Sim.hr, aes(Strata2)) +
stat_density(aes(ymax = ..density..,  ymin = -..density..),
fill = "grey50", colour = "grey50",
geom = "ribbon", position = "identity") +
xlab("Hazard Ratio\n") +
coord_flip() +
theme_bw()
print(Strata2Plot)
# Load packages
library(foreign)
library(Zelig)
library(ggplot2)
# Load data
mydata <- read.dta("/Users/christophergandrud/Dropbox/Jeff/swf/Christopher/ChinaRequest/R_update_9.dta")
# Keep only complete cases
vars <- c("begin", "end", "polit12_nodeath", "lCAO", "ltrade", "cumulative_crisis", "lbc", "led", "lpc3", "lpd", "lmaj", "lpol", "lgrow", "periphery_LAm", "count_polit12",  "imfcode")
data.complete <- mydata[complete.cases(mydata[vars]),]
data.complete <- data.complete[vars]
# Make interaction
data.complete$LcbLedInteract <- data.complete$lbc * data.complete$led
# Estimate model
M1 <- zelig(Surv(begin, end, polit12_nodeath) ~ lCAO + ltrade + cumulative_crisis + lbc + led + LcbLedInteract + lpc3 + lpd + lmaj + lpol + lgrow + periphery_LAm +  strata(count_polit12) +  cluster(imfcode), robust = TRUE, na.action=na.exclude, model = "coxph", data = data.complete, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
# Set fitted values
M1ExecSet2 <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=2")
M1NoneExecSet2 <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=2")
M1ExecSet14 <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=14")
M1NoneExecSet14 <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=14")
# Simulate
M1Sim2 <- sim(M1, x = M1ExecSet2, x1 = M1NoneExecSet2)
M1Sim14 <- sim(M1, x = M1ExecSet14, x1 = M1NoneExecSet14)
# Extract quantity of interest
M1Sim2.hr <- M1Sim2$qi
M1Sim2.hr <- data.frame(M1Sim2.hr$hr)
names(M1Sim2.hr) <- "Strata2"
M1Sim14.hr <- M1Sim14$qi
M1Sim14.hr <- data.frame(M1Sim14.hr$hr)
names(M1Sim14.hr) <- "Strata14"
# Load packages
library(foreign)
library(Zelig)
library(ggplot2)
# Load data
mydata <- read.dta("/Users/christophergandrud/Dropbox/Jeff/swf/Christopher/ChinaRequest/R_update_9.dta")
# Keep only complete cases
vars <- c("begin", "end", "polit12_nodeath", "lCAO", "ltrade", "cumulative_crisis", "lbc", "led", "lpc3", "lpd", "lmaj", "lpol", "lgrow", "periphery_LAm", "count_polit12",  "imfcode")
data.complete <- mydata[complete.cases(mydata[vars]),]
data.complete <- data.complete[vars]
# Make interaction
data.complete$LcbLedInteract <- data.complete$lbc * data.complete$led
# Estimate model
M1 <- zelig(Surv(begin, end, polit12_nodeath) ~ lCAO + ltrade + cumulative_crisis + lbc + led + LcbLedInteract + lpc3 + lpd + lmaj + lpol + lgrow + periphery_LAm +  strata(count_polit12) +  cluster(imfcode), robust = TRUE, na.action=na.exclude, model = "coxph", data = data.complete, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
# Set fitted values
M1ExecSet2 <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=2")
M1NoneExecSet2 <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=2")
M1ExecSet14 <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=14")
M1NoneExecSet14 <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=14")
# Simulate
M1Sim2 <- sim(M1, x = M1ExecSet2, x1 = M1NoneExecSet2)
M1Sim14 <- sim(M1, x = M1ExecSet14, x1 = M1NoneExecSet14)
# Extract quantity of interest
M1Sim2.hr <- M1Sim2$qi
M1Sim2.hr <- data.frame(M1Sim2.hr$hr)
names(M1Sim2.hr) <- "Strata2"
M1Sim14.hr <- M1Sim14$qi
M1Sim14.hr <- data.frame(M1Sim14.hr$hr)
names(M1Sim14.hr) <- "Strata14"
View(`M1Sim14.hr`)
M1SimMaster <- cbind(M1Sim2.hr, M1Sim14.hr)
View(`M1SimMaster`)
# Extract quantity of interest
M1Sim2.hr <- M1Sim2$qi
M1Sim2.hr <- data.frame(M1Sim2.hr$hr)
names(M1Sim2.hr) <- "HazardRatio"
M1Sim2.hr$Strata <- "Strata2"
View(`M1Sim2.hr`)
# Load packages
library(foreign)
library(Zelig)
library(ggplot2)
# Load data
mydata <- read.dta("/Users/christophergandrud/Dropbox/Jeff/swf/Christopher/ChinaRequest/R_update_9.dta")
# Keep only complete cases
vars <- c("begin", "end", "polit12_nodeath", "lCAO", "ltrade", "cumulative_crisis", "lbc", "led", "lpc3", "lpd", "lmaj", "lpol", "lgrow", "periphery_LAm", "count_polit12",  "imfcode")
data.complete <- mydata[complete.cases(mydata[vars]),]
data.complete <- data.complete[vars]
# Make interaction
data.complete$LcbLedInteract <- data.complete$lbc * data.complete$led
# Estimate model
M1 <- zelig(Surv(begin, end, polit12_nodeath) ~ lCAO + ltrade + cumulative_crisis + lbc + led + LcbLedInteract + lpc3 + lpd + lmaj + lpol + lgrow + periphery_LAm +  strata(count_polit12) +  cluster(imfcode), robust = TRUE, na.action=na.exclude, model = "coxph", data = data.complete, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
# Set fitted values
M1ExecSet2 <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=2")
M1NoneExecSet2 <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=2")
M1ExecSet14 <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=14")
M1NoneExecSet14 <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=14")
# Simulate
M1Sim2 <- sim(M1, x = M1ExecSet2, x1 = M1NoneExecSet2)
M1Sim14 <- sim(M1, x = M1ExecSet14, x1 = M1NoneExecSet14)
# Extract quantity of interest
M1Sim2.hr <- M1Sim2$qi
M1Sim2.hr <- data.frame(M1Sim2.hr$hr)
names(M1Sim2.hr) <- "HazardRatio"
M1Sim2.hr$Strata <- "Strata2"
M1Sim14.hr <- M1Sim14$qi
M1Sim14.hr <- data.frame(M1Sim14.hr$hr)
names(M1Sim14.hr) <- "HazardRatio"
M1Sim2.hr$Strata <- "Strata14"
# Combine simulation columns
M1SimMaster <- rbind(M1Sim2.hr, M1Sim14.hr)
View(`M1Sim2.hr`)
View(`M1Sim14.hr`)
# Load packages
library(foreign)
library(Zelig)
library(ggplot2)
# Load data
mydata <- read.dta("/Users/christophergandrud/Dropbox/Jeff/swf/Christopher/ChinaRequest/R_update_9.dta")
# Keep only complete cases
vars <- c("begin", "end", "polit12_nodeath", "lCAO", "ltrade", "cumulative_crisis", "lbc", "led", "lpc3", "lpd", "lmaj", "lpol", "lgrow", "periphery_LAm", "count_polit12",  "imfcode")
data.complete <- mydata[complete.cases(mydata[vars]),]
data.complete <- data.complete[vars]
# Make interaction
data.complete$LcbLedInteract <- data.complete$lbc * data.complete$led
# Estimate model
M1 <- zelig(Surv(begin, end, polit12_nodeath) ~ lCAO + ltrade + cumulative_crisis + lbc + led + LcbLedInteract + lpc3 + lpd + lmaj + lpol + lgrow + periphery_LAm +  strata(count_polit12) +  cluster(imfcode), robust = TRUE, na.action=na.exclude, model = "coxph", data = data.complete, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
# Set fitted values
M1ExecSet2 <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=2")
M1NoneExecSet2 <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=2")
M1ExecSet14 <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=14")
M1NoneExecSet14 <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=14")
# Simulate
M1Sim2 <- sim(M1, x = M1ExecSet2, x1 = M1NoneExecSet2)
M1Sim14 <- sim(M1, x = M1ExecSet14, x1 = M1NoneExecSet14)
# Extract quantity of interest
M1Sim2.hr <- M1Sim2$qi
M1Sim2.hr <- data.frame(M1Sim2.hr$hr)
names(M1Sim2.hr) <- "HazardRatio"
M1Sim2.hr$Strata <- "Strata2"
M1Sim14.hr <- M1Sim14$qi
M1Sim14.hr <- data.frame(M1Sim14.hr$hr)
names(M1Sim14.hr) <- "HazardRatio"
M1Sim14.hr$Strata <- "Strata14"
M1SimMaster <- rbind(M1Sim2.hr, M1Sim14.hr)
StrataPlot <- ggplot(data = M1Sim.hr, aes(x = HazardRation, colour = Strata, group = Strata)) +
stat_density(fill = NA),
theme_bw()
print(StrataPlot)
StrataPlot <- ggplot(data = M1Sim.hr, aes(x = HazardRation, colour = Strata, group = Strata)) +
stat_density(fill = NA) +
theme_bw()
print(StrataPlot)
StrataPlot <- ggplot(data = M1Sim.hr, aes(x = HazardRation, colour = Strata, group = Strata)) +
stat_density() +
theme_bw()
StrataPlot <- ggplot(data = M1SimMaster.hr, aes(x = HazardRation, colour = Strata, group = Strata)) +
stat_density() +
theme_bw()
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRation, colour = Strata, group = Strata)) +
stat_density() +
theme_bw()
print(StrataPlot)
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, colour = Strata, group = Strata)) +
stat_density() +
theme_bw()
print(StrataPlot)
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, colour = Strata, group = Strata)) +
stat_density(fill = NA) +
theme_bw()
print(StrataPlot)
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, colour = Strata, group = Strata)) +
stat_density(fill = NA, colour = Strata, name = "") +
theme_bw()
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, colour = Strata, group = Strata)) +
stat_density(fill = NA, colour = "Strata", name = "") +
theme_bw()
print(StrataPlot)
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, colour = Strata, group = Strata)) +
stat_density(fill = NA, name = "") +
theme_bw()
print(StrataPlot)
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, colour = Strata, group = Strata)) +
stat_density(fill = NA, name = NULL) +
theme_bw()
print(StrataPlot)
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, roup = Strata)) +
stat_density(fill = NA) +
theme_bw()
print(StrataPlot)
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, group = Strata)) +
stat_density(fill = NA) +
theme_bw()
print(StrataPlot)
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, colour = Strata)) +
stat_density(fill = NA) +
theme_bw()
print(StrataPlot)
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, colour = Strata)) +
stat_density(fill = mpaa) +
theme_bw()
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, colour = Strata)) +
stat_density() +
theme_bw()
print(StrataPlot)
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, colour = Strata, fill = Strata)) +
stat_density() +
theme_bw()
print(StrataPlot)
# Plot HR densities
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, colour = Strata, fill = Strata)) +
stat_density() +
xlab("\nHazard Ratio") + ylab("Density\n") +
theme_bw()
print(StrataPlot)
# Load packages
library(foreign)
library(Zelig)
library(ggplot2)
# Load data
mydata <- read.dta("/Users/christophergandrud/Dropbox/Jeff/swf/Christopher/ChinaRequest/R_update_9.dta")
# Keep only complete cases
vars <- c("begin", "end", "polit12_nodeath", "lCAO", "ltrade", "cumulative_crisis", "lbc", "led", "lpc3", "lpd", "lmaj", "lpol", "lgrow", "periphery_LAm", "count_polit12",  "imfcode")
data.complete <- mydata[complete.cases(mydata[vars]),]
data.complete <- data.complete[vars]
# Make interaction
data.complete$LcbLedInteract <- data.complete$lbc * data.complete$led
# Estimate model
M1 <- zelig(Surv(begin, end, polit12_nodeath) ~ lCAO + ltrade + cumulative_crisis + lbc + led + LcbLedInteract + lpc3 + lpd + lmaj + lpol + lgrow + periphery_LAm +  strata(count_polit12) +  cluster(imfcode), robust = TRUE, na.action=na.exclude, model = "coxph", data = data.complete, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
# Set fitted values
M1ExecSet2 <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=2")
M1NoneExecSet2 <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=2")
M1ExecSet14 <- setx(M1, lbc = 1, led = 1, LcbLedInteract = 1, strata = "count_polit12=14")
M1NoneExecSet14 <- setx(M1, lbc = 1, led = 0, LcbLedInteract = 0, strata = "count_polit12=14")
# Simulate
M1Sim2 <- sim(M1, x = M1ExecSet2, x1 = M1NoneExecSet2)
M1Sim14 <- sim(M1, x = M1ExecSet14, x1 = M1NoneExecSet14)
# Extract quantity of interest
M1Sim2.hr <- M1Sim2$qi
M1Sim2.hr <- data.frame(M1Sim2.hr$hr)
names(M1Sim2.hr) <- "HazardRatio"
M1Sim2.hr$Strata <- "2"
M1Sim14.hr <- M1Sim14$qi
M1Sim14.hr <- data.frame(M1Sim14.hr$hr)
names(M1Sim14.hr) <- "HazardRatio"
M1Sim14.hr$Strata <- "14"
# Combine simulation columns
M1SimMaster <- rbind(M1Sim2.hr, M1Sim14.hr)
# Plot HR densities
StrataPlot <- ggplot(data = M1SimMaster, aes(x = HazardRatio, colour = Strata, fill = Strata)) +
stat_density() +
xlab("\nHazard Ratio") + ylab("Density\n") +
theme_bw()
print(StrataPlot)
M1Sim2 <- sim(M1, x = M1ExecSet2, x1 = M1NoneExecSet2)
M1Sim14 <- sim(M1, x = M1ExecSet14, x1 = M1NoneExecSet14)
summary(M1Sim2)
install.packages(c("MASS", "corrgram", "ez", "googleVis", "gridExtra", "gsubfn", "timeSeries"))
install.packages("slidify")
?dataset
?data
data()
rivers <- rivers
fix(rivers)
class(rivers)
?round
?cat
sessionInfo()
ExplainHead <- "Session Info for a test project"
Info <- sessionInfo()
cat(ExplainHead, Info, file = "~Desktop/TestSessionInfo.tex")
cat(ExplainHead, Info, file = "~/Desktop/TestSessionInfo.tex")
cat(ExplainHead, Info, file = "~/Desktop/TestSessionInfo.txt")
fix(Info)
Info <- as.string(sessionInfo())
Info <- string(sessionInfo())
Info <- character(sessionInfo())
Info <- as.character(sessionInfo())
fix(Info)
cat(ExplainHead, Info, file = "~/Desktop/TestSessionInfo.txt")
Info <- as.dataframe(sessionInfo())
Info <- as.data.frame(sessionInfo())
Info <- matrix(sessionInfo())
View(Info)
print(ExplainHead, Info, file = "~/Desktop/TestSessionInfo.txt")
Info <- sessionInfo()
print(ExplainHead, Info, file = "~/Desktop/TestSessionInfo.txt")
print(Info, file = "~/Desktop/TestSessionInfo.txt")
fix(Info)
?print
print(Info, locale = FALSE)
cat(print(Info), file = "~/Desktop/TestSessionInfo.txt")
?dump
cat(dump(Info), file = "~/Desktop/TestSessionInfo.txt")
Info
dump(Info, file = "~/Desktop/Test.txt")
cat(as.Character(Info), file = "~/Desktop/TestSessionInfo.txt")
cat(as.character(Info), file = "~/Desktop/TestSessionInfo.txt")
toLatex(Info)
?toLatex
test <- print(Info)
fix(test)
toLatex()
toLatex(sessionInfo())
writeLines(print(sessionInfo()))
writeLines(Info)
??markdown
?source
?system
?try
library(knitr)
?system
system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex")
system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex")
test <- system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex")
print(system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex"))
test <- (as.character(system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex")))
?system
test <- system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex", intern = TRUE)
fix(test)
fix(test)
test
StyleCon <- system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex", intern = TRUE)
StyleConOut <- paste(StyleCon, sep = "")
fix(StyleConOut)
StyleCon <- system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex", intern = TRUE)
StyleConOut <- paste(StyleCon, sep = "", collapse = "")
fix(StyleConOut)
StyleCon <- system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex", intern = TRUE)
StyleConOut <- paste(StyleCon, sep = "", collapse = "\\")
fix(StyleConOut)
?toLatex
?tempfile
temp <- tempfile()
system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex -o temp", intern = TRUE)
readLines(temp.tex)
system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex -o ~/Desktop/temp.tex", intern = TRUE)
unlink(~/Desktop/temp.tex)
unlink("~/Desktop/temp.tex")
system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex -o /Source/temp.tex", intern = TRUE)
system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex -o temp.tex", intern = TRUE)
system("pandoc /git_repositories/Rep-Res-Book/StylisticConventions.md -t latex -o /git_repositories/Rep-Res-Book/temp.tex", intern = TRUE)
library(foreign)
library(foreign)
trade <- read.dta(/Users/christophergandrud/Dropbox/Jeff/SWF/Christopher/22AugustRequest/trade.dta")
trade <- read.dta("/Users/christophergandrud/Dropbox/Jeff/SWF/Christopher/22AugustRequest/trade.dta")
View(trade)
library(countrycode)
View(trade)
?countrycode
names(trade)
trade$countr <- countrycode(trade$country1, origin = iso3n, destination = imf)
trade$countr <- countrycode(trade$country1, origin = "iso3n", destination = "imf")
View(trade)
trade$countr <- countrycode(trade$country1, origin = "iso3c", destination = "imf")
View(trade)
trade$country <- countrycode(trade$country1, origin = "iso3c", destination = "imf")
summary(trade$country)
write.dta(trade, file = "~/Desktop/TradeIMF.dta")
library(foreign)
library(countrycode)
# Load data
trade <- read.dta("/Users/christophergandrud/Dropbox/Jeff/SWF/Christopher/22AugustRequest/trade.dta")
trade$country <- countrycode(trade$country1, origin = "iso3c", destination = "imf")
write.dta(trade, file = "~/Desktop/TradeIMF.dta")
library(foreign)
library(countrycode)
# Load data
trade <- read.dta("/Users/christophergandrud/Dropbox/Jeff/SWF/Christopher/22AugustRequest/trade.dta")
trade$imfcode <- countrycode(trade$country1, origin = "iso3c", destination = "imf")
write.dta(trade, file = "~/Desktop/TradeIMF.dta")
library(slidify)
setwd("/git_repositories/Introduction_to_Statistics_and_Data_Analysis_Yonsei/Lectures/Ad/")
slidify("ad_data.Rmd", framework = "html5slides")
library(devtools)
install_github('slidify', 'ramnathv')
slidify("ad_data.Rmd", framework = "html5slides")
slidify("ad_data.Rmd", framework = "deck.js")
slidify("ad_data.Rmd")
create_deck('StatsCourseAdd')
slidify('index.Rmd')
slidify('/StatsCourseAd/index.Rmd')
slidifyDefaults()
setwd("/git_repositories/Introduction_to_Statistics_and_Data_Analysis_Yonsei/Lectures/StatsCourseAd")
slidify("index.Rmd")
install_github('knitr', 'yihui')
install_github('whisker', 'edwindj')
install_github('markdown', 'rstudio')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd", framework = "deck.js")
slidify("index.Rmd", framework = deck.js)
