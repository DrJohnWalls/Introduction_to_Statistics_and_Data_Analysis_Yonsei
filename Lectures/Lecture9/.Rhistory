xlab("") + ylab("Time") +
theme_bw(base_size = 15)
ggplot(data = TimeCICompare, aes(x = CI,
y = MeanTime,
ymin = L,
ymax = U)) +
geom_pointrange(size = 4) +
coord_flip() +
geom_hline(yintercept = 93.29, colour = "#1F78B4", linetype = 1) +
xlab("") + ylab("Time") +
theme_bw(base_size = 15)
Colours2 <- c("#91CF60", "#FC8D59")
Colours2 <- c("#91CF60", "#FC8D59")
ggplot(data = TimeCICompare, aes(x = CI,
y = MeanTime,
ymin = L,
ymax = U)) +
geom_pointrange(size = 4) +
scale_colour_manual(values = Colours2)
coord_flip() +
geom_hline(yintercept = 93.29, colour = "#1F78B4", linetype = 1) +
xlab("") + ylab("Time") +
theme_bw(base_size = 15)
ggplot(data = TimeCICompare, aes(x = CI,
y = MeanTime,
ymin = L,
ymax = U)) +
geom_pointrange(size = 4) +
scale_colour_manual(values = Colours2) +
coord_flip() +
geom_hline(yintercept = 93.29, colour = "#1F78B4", linetype = 1) +
xlab("") + ylab("Time") +
theme_bw(base_size = 15)
ggplot(data = TimeCICompare, aes(x = CI,
y = MeanTime,
ymin = L,
ymax = U)) +
geom_pointrange(size = 4) +
scale_color_manual(values = Colours2, name = "") +
coord_flip() +
geom_hline(yintercept = 93.29, colour = "#1F78B4", linetype = 1) +
xlab("") + ylab("Time") +
theme_bw(base_size = 15)
ggplot(data = TimeCICompare, aes(x = CI,
y = MeanTime,
ymin = L,
ymax = U,
colour = CI)) +
geom_pointrange(size = 4) +
scale_color_manual(values = Colours2, name = "") +
coord_flip() +
geom_hline(yintercept = 93.29, colour = "#1F78B4", linetype = 1) +
xlab("") + ylab("Time") +
theme_bw(base_size = 15)
ggplot(data = TimeCICompare, aes(x = CI,
y = MeanTime,
ymin = L,
ymax = U,
colour = CI)) +
geom_pointrange(size = 4) +
scale_color_manual(values = Colours2, name = "", guides = FALSE) +
coord_flip() +
geom_hline(yintercept = 93.29, colour = "#1F78B4", linetype = 1) +
xlab("") + ylab("Time") +
theme_bw(base_size = 15)
ggplot(data = TimeCICompare, aes(x = CI,
y = MeanTime,
ymin = L,
ymax = U,
colour = CI)) +
geom_pointrange(size = 4) +
scale_color_manual(values = Colours2, name = "", guides = 'hide') +
coord_flip() +
geom_hline(yintercept = 93.29, colour = "#1F78B4", linetype = 1) +
xlab("") + ylab("Time") +
theme_bw(base_size = 15)
ggplot(data = TimeCICompare, aes(x = CI,
y = MeanTime,
ymin = L,
ymax = U,
colour = CI)) +
geom_pointrange(size = 4) +
scale_color_manual(values = Colours2, guide = FALSE) +
coord_flip() +
geom_hline(yintercept = 93.29, colour = "#1F78B4", linetype = 1) +
xlab("") + ylab("Time") +
theme_bw(base_size = 15)
viewData(TimeH)
qqline(Run10Samp$mean)
qqline(Run10Samp$mean, lty=2)
qqline(Run10Samp$mean, lty=2)
qqnorm(Run10Samp$mean)
#### Summary of Men's Times ####
# Subset sample to include only men's Times
MenSubset <- subset(Run10Samp$time,
Run10Samp$gender == "M")
# Mean
Mean <- mean(MenSubset)
# Standard Deviation
SD <- sd(MenSubset)
# Number of observations
N <- length(MenSubset)
# Create Gender Variable
Gender <- "Male"
#Combine
GenderData <- data.frame(Gender, Mean, SD, N)
#### Summary of Women's Times ####
# Subset sample to include only women's Times
WomenSubset <- subset(Run10Samp$time, Run10Samp$gender == "F")
# Mean
Mean <- mean(WomenSubset)
# Standard Deviation
SD <- sd(WomenSubset)
# Number of observations
N <- length(WomenSubset)
# Create Gender Variable
Gender <- "Female"
#Combine
GenderDataF <- data.frame(Gender, Mean, SD, N)
# Combine into one data frame
GenderData <- data.frame(GenderData, GenderDataF)
ggplot(Run10Samp, aes(time)) +
geom_boxplot(aes(
group = gender, color = gender)) +
theme_bw()
ggplot(Run10Samp, aes(time)) +
geom_boxplot(aes(
y = gender, color = gender)) +
theme_bw()
ggplot(Run10Samp, aes(time)) +
geom_boxplot(aes(
y = gender)) +
theme_bw()
# Compare densities of Men/Women Times
ggplot(Run10Samp, aes(x = time, y = gender)) +
geom_boxplot() +
theme_bw()
viewData(Run10Samp)
ggplot(Run10Samp, aes(x = time, y = gender)) +
geom_boxplot() +
theme_bw()
# Load package RCurl
library(RCurl)
# Create URL object for OpenIntro data
url <- paste("https://raw.github.com/christopher",
"gandrud/Introduction_to_Statistics_",
"and_Data_Analysis",
"_Yonsei/master/Lectures/Lecture7/",
"OpenIntroData/run10.txt", sep = "")
# Download data
Run10 <- getURL(url, ssl.verifypeer = FALSE)
# Convert Run10 to data.frame
Run10 <- read.table(textConnection(Run10),
sep = "\t", header = TRUE)
# Take a random sample of 200 runners
Run10Samp <- Run10[sample(1:nrow(Run10), 200,
replace=FALSE),]
# Find mean sample time
MeanTime <- mean(Run10Samp$time)
# Find sample time standard deviation
SDTime <- sd(Run10Samp$time)
ggplot(Run10Samp, aes(x = time, y = gender)) +
geom_boxplot() +
theme_bw()
ggplot(Run10Samp, aes(x = time, y = factor(gender))) +
geom_boxplot() +
theme_bw()
summary(Run10Samp)
ggplot(Run10Samp, aes(y = time, x = factor(gender))) +
geom_boxplot() +
theme_bw()
ggplot(Run10Samp, aes(y = time, x = factor(gender))) +
geom_boxplot(colour = gender) +
theme_bw()
ggplot(Run10Samp, aes(y = time, x = gender)) +
geom_boxplot(colour = gender) +
theme_bw()
ggplot(Run10Samp, aes(y = time, x = gender, color = gender)) +
geom_boxplot() +
theme_bw()
?qqline
qqline(Run10Samp$time)
qqnorm(Run10Samp$time); qqline(Run10Samp$time)
#### Summary of Men's Times ####
# Subset sample to include only men's Times
MenSubset <- subset(Run10Samp$time,
Run10Samp$gender == "M")
# Mean
Mean <- mean(MenSubset)
# Standard Deviation
SD <- sd(MenSubset)
# Number of observations
N <- length(MenSubset)
# Create Gender Variable
Gender <- "Male"
#Combine
GenderData <- data.frame(Gender, Mean, SD, N)
#### Summary of Women's Times ####
# Subset sample to include only women's Times
WomenSubset <- subset(Run10Samp$time, Run10Samp$gender == "F")
# Mean
Mean <- mean(WomenSubset)
# Standard Deviation
SD <- sd(WomenSubset)
# Number of observations
N <- length(WomenSubset)
# Create Gender Variable
Gender <- "Female"
#Combine
GenderDataF <- data.frame(Gender, Mean, SD, N)
# Combine into one data frame
GenderData <- data.frame(GenderData, GenderDataF)
viewData(GenderData)
?pnorm
round(mean(Run10$time), digit = 1)
pnorm(93.29)
pnorm(1.21)
Z <- (mean(Run10Samp$time) - 93.29)/std.error(Run10Samp$time)
pnorm(-0.81)
pnorm(2*-0.81)
P1 <- pnorm(Z)
P1
P1 <- 1 - pnorm(Z)
P1
Z
pnorm(2.47)
P1
pnorm(-0.81)
P2 <- 1 - 2 * pnorm(Z)
P2
2 * pnorm(Z)
1 - 2 * pnorm(Z)
P2 <- 1 - 2 * pnorm(Z)
P2
MeanMen <- mean(subset(Run10Samp$time, gender = "m"))
MeanMen <- mean(subset(Run10Samp$time, gender = "M"))
viewData(Run10Samp)
with(Run10Samp,{
MeanMen <- mean(subset(time, gender = "M"))
MeanWomen <- mean(subset(time, gender = "F"))
}
)
MeanMen <- mean(subset(Run10Samp$time,
Run10Samp$gender = "M"))
MeanWomen <- mean(subset(Run10Samp$time,
Run10Samp$gender = "F"))
with(Run10Samp,{
MeanMen <- mean(subset(time, gender == "M"))
MeanWomen <- mean(subset(time, gender == "F"))
})
MeanMen
MeanMen <- mean(subset(Run10Samp$time, gender == "M"))
MeanMen <- mean(subset(Run10Samp$time,
Run10Samp$gender == "M"))
MeanWomen <- mean(subset(Run10Samp$time,
Run10Samp$gender == "F"))
SEMen <- std.error(MenSubset)
SEWomen <- std.error(WomenSubset)
SEDiff <- SEMen + SEWomen
CIDiff <- data.frame(Var, Lower, MeanDiff, Upper)
Var <- "Difference of Means"
CIDiff <- data.frame(Var, Lower, MeanDiff, Upper)
Lower <- MeanDiff - 1.96 * SEDiff
# Upper bound of the confidence interval
Upper <- MeanDiff + 1.96 * SEDiff
# Subset Samples
MenSubset <- subset(Run10Samp$time,
Run10Samp$gender == "M")
WomenSubset <- subset(Run10Samp$time,
Run10Samp$gender == "F")
# Means
MeanMen <- mean(MenSubset)
MeanWomen <- mean(WomenSubset)
# Mean difference
MeanDiff <- MeanMen - MeanWomen
# Standard Errors
SEMen <- std.error(MenSubset)
SEWomen <- std.error(WomenSubset)
# Standard error of the difference of two means
SEDiff <- SEMen + SEWomen
# Lower bound of the confidence interval
Lower <- MeanDiff - 1.96 * SEDiff
# Upper bound of the confidence interval
Upper <- MeanDiff + 1.96 * SEDiff
Lower
Upper
Var <- "Difference of Means"
CIDiff <- data.frame(Var, Lower, MeanDiff, Upper)
viewData(CIDiff)
Var <- "Difference of Means"
CIDiff <- data.frame(Var, Lower, MeanDiff, Upper)
# Plot Time estimates
ggplot(data = TimeCI, aes(x = Var,
y = MeanDiff,
ymin = L,
ymax = U)) +
geom_pointrange(size = 4, colour = "#91CF60") +
coord_flip() +
geom_hline(yintercept = 0, colour = "#1F78B4", linetype = 1) +
xlab("") + ylab("Time") +
theme_bw(base_size = 15)
Var <- "Difference of Means"
CIDiff <- data.frame(Var, Lower, MeanDiff, Upper)
# Plot Time estimates
ggplot(data = CIDiff, aes(x = Var,
y = MeanDiff,
ymin = L,
ymax = U)) +
geom_pointrange(size = 4, colour = "#91CF60") +
coord_flip() +
geom_hline(yintercept = 0, colour = "#1F78B4", linetype = 1) +
xlab("") + ylab("Time") +
theme_bw(base_size = 15)
ggplot(data = CIDiff, aes(x = Var,
y = MeanDiff,
ymin = Lower,
ymax = Upper)) +
geom_pointrange(size = 4, colour = "#91CF60") +
coord_flip() +
geom_hline(yintercept = 0, colour = "#1F78B4", linetype = 1) +
xlab("") + ylab("Time") +
theme_bw(base_size = 15)
# Download data
download.file("http://bit.ly/PO9XsF",
destfile = "ames.RData")
# Load Data
load("ames.RData")
viewData(ames)
summary(ames)
?pnorm
?prop.test
# Load package RCurl
library(RCurl)
# Create URL object for OpenIntro data
url <- paste("https://raw.github.com/christopher",
"gandrud/Introduction_to_Statistics_",
"and_Data_Analysis",
"_Yonsei/master/Lectures/Lecture7/",
"OpenIntroData/run10.txt", sep = "")
# Download data
Run10 <- getURL(url, ssl.verifypeer = FALSE)
# Convert Run10 to data.frame
Run10 <- read.table(textConnection(Run10),
sep = "\t", header = TRUE)
# Take a random sample of 200 runners
Run10Samp <- Run10[sample(1:nrow(Run10), 200,
replace=FALSE),]
# Find mean sample time
MeanTime <- mean(Run10Samp$time)
# Find sample time standard deviation
SDTime <- sd(Run10Samp$time)
# Load library
library(ggplot2)
library(plotrix)
# Create confidence interval data frame
Var <- "Time"
TimeCI <- data.frame(Var, MeanTime)
TimeCI$L <- MeanTime - 1.96 * std.error(Run10Samp$time)
TimeCI$U <- MeanTime + 1.96 * std.error(Run10Samp$time)
TimeCI$CI <- "95%"
# Plot Time estimates
ggplot(data = TimeCI, aes(x = Var,
y = MeanTime,
ymin = L,
ymax = U)) +
geom_pointrange(size = 4, colour = "#91CF60") +
coord_flip() +
xlab("") + ylab("") +
theme_bw(base_size = 15)
# Find 99% Confidence Intervals
# Create confidence interval data frame
Var <- "Time"
TimeH <- data.frame(Var, MeanTime)
TimeH$L <- MeanTime - 2.58 * std.error(Run10Samp$time)
TimeH$U <- MeanTime + 2.58 * std.error(Run10Samp$time)
TimeH$CI <- "99%"
# Merge with
TimeCICompare <- rbind(TimeCI, TimeH)
# Load library
library(plotrix)
# Find Z score
Z <- (mean(Run10Samp$time) - 93.29)/
std.error(Run10Samp$time)
Z
?t.test
t.test(Run10Samp$time, mu = 93.29)
P2 <- 2 * (1 - pnorm(Z))
P2
# Load package RCurl
library(RCurl)
# Create URL object for OpenIntro data
url <- paste("https://raw.github.com/christopher",
"gandrud/Introduction_to_Statistics_",
"and_Data_Analysis",
"_Yonsei/master/Lectures/Lecture7/",
"OpenIntroData/run10.txt", sep = "")
# Download data
Run10 <- getURL(url, ssl.verifypeer = FALSE)
# Convert Run10 to data.frame
Run10 <- read.table(textConnection(Run10),
sep = "\t", header = TRUE)
# Take a random sample of 200 runners
Run10Samp <- Run10[sample(1:nrow(Run10), 200,
replace=FALSE),]
# Find mean sample time
MeanTime <- mean(Run10Samp$time)
# Find sample time standard deviation
SDTime <- sd(Run10Samp$time)
# Load library
library(ggplot2)
library(plotrix)
# Create confidence interval data frame
Var <- "Time"
TimeCI <- data.frame(Var, MeanTime)
TimeCI$L <- MeanTime - 1.96 * std.error(Run10Samp$time)
TimeCI$U <- MeanTime + 1.96 * std.error(Run10Samp$time)
TimeCI$CI <- "95%"
# Plot Time estimates
ggplot(data = TimeCI, aes(x = Var,
y = MeanTime,
ymin = L,
ymax = U)) +
geom_pointrange(size = 4, colour = "#91CF60") +
coord_flip() +
xlab("") + ylab("") +
theme_bw(base_size = 15)
# Plot Time estimates
ggplot(data = TimeCI, aes(x = Var,
y = MeanTime,
ymin = L,
ymax = U)) +
geom_pointrange(size = 4, colour = "#91CF60") +
coord_flip() +
geom_hline(yintercept = 93.29, colour = "#1F78B4", linetype = 1) +
xlab("") + ylab("Time") +
theme_bw(base_size = 15)
# Load library
library(animation)
conf.int()
Z <- (mean(Run10Samp$time) - 93.29)/
std.error(Run10Samp$time)
P1 <- 1 - pnorm(Z)
P2 <- 2 * (1 - pnorm(Z))
p2
P2
t.test(Run10Samp$time, mu = 93.29)
# Subset Samples
MenSubset <- subset(Run10Samp$time,
Run10Samp$gender == "M")
WomenSubset <- subset(Run10Samp$time,
Run10Samp$gender == "F")
# Means
MeanMen <- mean(MenSubset)
MeanWomen <- mean(WomenSubset)
# Mean difference
MeanDiff <- MeanMen - MeanWomen
# Standard Errors
SEMen <- std.error(MenSubset)
SEWomen <- std.error(WomenSubset)
# Standard error of the difference of two means
SEDiff <- SEMen + SEWomen
# Lower bound of the confidence interval
Lower <- MeanDiff - 1.96 * SEDiff
# Upper bound of the confidence interval
Upper <- MeanDiff + 1.96 * SEDiff
Lower
Upper
t.test(MenSubset, WomenSubset)
library(openintro)
data(satGPA)
?satGPA
mean(satGPA$HSGPA)
library(plotrix)
SeGPA <- std.error(satGPA$HSGPA)
MeanGPA <- mean(satGPA$HSGPA)
LowerGPA <- MeanGPA - 1.96 * SEGPA
LowerGPA <- MeanGPA - 1.96 * SeGPA
LowerGPA
UpperGPA <- MeanGPA + 1.96 * SeGPA
UpperGPA
Zgpa <- (MeanGPA -3.5)/SeGPA
P <- 2 * (1 - pnorm(Z))
p
P
t.test(Zgpa)
t.test(satGPA$HSGPA, mu = 3.5)
2*(1-pnorm(Zgpa))
(1-pnorm(Zgpa)
(1-pnorm(Zgpa))
(1-pnorm(Zgpa))
(1-pnorm(Zgpa))
Zgpa <- (MeanGPA - 3.5)/SeGPA
library(openintro)
data(satGPA)
# Find Mean
MeanGPA <- mean(satGPA$HSGPA)
# Find Standard Error
library(plotrix)
SeGPA <- std.error(satGPA$HSGPA)
#### Find 95% Confidence Interval ####
LowerGPA <- MeanGPA - 1.96 * SeGPA
UpperGPA <- MeanGPA + 1.96 * SeGPA
Zgpa <- (MeanGPA - 3.5)/SeGPA
(1-pnorm(Zgpa))
t.test(satGPA$HSGPA, mu = 3.5)
Subset1 <- subset(satGPA$HSGPA,
satGPA$sex == "1")
Subset2 <- subset(satGPA$HSGPA,
satGPA$sex == "2")
t.test(Subset1, Subset2)
?t.test
t.test(Subset1, Subset2, conf.level = 0.99)
